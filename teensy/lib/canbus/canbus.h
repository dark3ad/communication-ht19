/**
 * @file canbus.h
 * @author Jesper Mellquist
 * @brief Generated interface for the canbus module for the communication node.
 *        DO NOT EDIT THIS FILE BY HAND.
 * @version 0.1
 * @date 2020-11-10
 *
 * @copyright Copyright (c) 2020
 *
 */

#ifndef CANBUS_H
#define CANBUS_H

#include <stdint.h>
#include <stdbool.h>

/**
 * @brief Get the ambient temperature.
 *
 * @return uint8_t The return value is between 0 and 50.
 */
uint8_t get_temperature(void);

/**
 * @brief Get the ambient humidity percentage.
 *
 * @return uint8_t The return value is between 0 and 100.
 */
uint8_t get_humidity(void);

/**
 * @brief Get the flow rate in milliliter per second.
 *
 * @return uint16_t The return value is between 17 and 500.
 */
uint16_t get_flow_rate(void);

/**
 * @brief Get the light intensity percentage.
 *
 * @return uint8_t The return value is between 0 and 100.
 */
uint8_t get_light_intensity(void);

/**
 * @brief Get the water level percentage.
 *
 * @return uint8_t The return value is between 0 and 100.
 */
uint8_t get_water_level(void);

/**
 * @brief Get the soil moisture percentage.
 *
 * @return uint8_t The return value is between 0 and 100.
 */
uint8_t get_soil_moisture(void);

/**
 * @brief Get the dht sensor status.
 *
 * @return uint8_t The possible return values is UNINITIALIZED | OKAY | ERROR.
 */
uint8_t get_dht_sensor_status(void);

/**
 * @brief Get the flow meter sensor status.
 *
 * @return uint8_t The possible return values is UNINITIALIZED | OKAY | ERROR.
 */
uint8_t get_flow_meter_sensor_status(void);

/**
 * @brief Get the light intensity sensor status.
 *
 * @return uint8_t The possible return values is UNINITIALIZED | OKAY | ERROR.
 */
uint8_t get_light_intesity_sensor_status(void);

/**
 * @brief Get the water level sensor status.
 *
 * @return uint8_t The possible return values is UNINITIALIZED | OKAY | ERROR.
 */
uint8_t get_water_level_sensor_status(void);

/**
 * @brief Get the soil moisture sensor status.
 *
 * @return uint8_t The possible return values is UNINITIALIZED | OKAY | ERROR.
 */
uint8_t get_soil_moisture_sensor_status(void);

/**
 * @brief Get the esp32 status.
 *
 * @return uint8_t The possible return values is UNINITIALIZED | OKAY | I2C_ERROR | NTP_ERROR | WIFI_DISCONNECTED | MQTT_DISCONNECTED | MQTT_PUBLISH_ERROR.
 */
uint8_t get_esp32_status(void);

/**
 * @brief Get the SD card status.
 *
 * @return uint8_t The possible return values is UNINITIALIZED | OKAY | ERROR.
 */
uint8_t get_sdcard_status(void);

/**
 * @brief Get the SD card free space in mb.
 *
 * @return uint16_t The return value is between 0 and 2048.
 */
uint16_t get_sdcard_free_space(void);

/**
 * @brief Get the SD card status.
 *
 * @return uint8_t The possible return values is DISCONNECTED | CONNECTED | ERROR.
 */
uint8_t get_terminal_status(void);

/**
 * @brief Get the RTC status.
 *
 * @return uint8_t The possible return values is UNINITIALIZED | OKAY.
 */
uint8_t get_rtc_status(void);

/**
 * @brief Get the current RTC year.
 *
 * @return uint16_t The return value is between 2020 and 2040.
 */
uint16_t get_rtc_year(void);

/**
 * @brief Get the current RTC month.
 *
 * @return uint8_t The return value is between 1 and 12.
 */
uint8_t get_rtc_month(void);

/**
 * @brief Get the current RTC day.
 *
 * @return uint8_t The return value is between 1 and 31.
 */
uint8_t get_rtc_day(void);

/**
 * @brief Get the current RTC hour.
 *
 * @return uint8_t The return value is between 0 and 23.
 */
uint8_t get_rtc_hour(void);

/**
 * @brief Get the current RTC minute.
 *
 * @return uint8_t The return value is between 0 and 59.
 */
uint8_t get_rtc_minute(void);

/**
 * @brief Get the current RTC second.
 *
 * @return uint8_t The return value is between 0 and 59.
 */
uint8_t get_rtc_second(void);

/**
 * @brief Get the lamp state.
 *
 * @return uint8_t The possible return values is OFF | ON.
 */
uint8_t get_lamp_state(void);

/**
 * @brief Get the heater state.
 *
 * @return uint8_t The possible return values is OFF | ON.
 */
uint8_t get_heater_state(void);

/**
 * @brief Get the water pump state.
 *
 * @return uint8_t The possible return values is OFF | ON.
 */
uint8_t get_water_pump_state(void);

/**
 * @brief Get the water valve state.
 *
 * @return uint8_t The possible return values is OFF | ON.
 */
uint8_t get_water_valve_state(void);

/**
 * @brief Get the window ventilator state.
 *
 * @return uint8_t The possible return values is CLOSE | OPEN.
 */
uint8_t get_window_ventilator_state(void);

/**
 * @brief Get the fan state.
 *
 * @return uint8_t The possible return values is OFF | ON.
 */
uint8_t get_fan_state(void);

/**
 * @brief Get the lamp status.
 *
 * @return uint8_t The possible return values is UNINITIALIZED | OKAY | ERROR.
 */
uint8_t get_lamp_status(void);

/**
 * @brief Get the heater status.
 *
 * @return uint8_t The possible return values is UNINITIALIZED | OKAY | ERROR.
 */
uint8_t get_heater_status(void);

/**
 * @brief Get the water_pump status.
 *
 * @return uint8_t The possible return values is UNINITIALIZED | OKAY | ERROR.
 */
uint8_t get_water_pump_status(void);

/**
 * @brief Get the water_valve status.
 *
 * @return uint8_t The possible return values is UNINITIALIZED | OKAY | ERROR.
 */
uint8_t get_water_valve_status(void);

/**
 * @brief Get the window ventilator status.
 *
 * @return uint8_t The possible return values is UNINITIALIZED | OKAY | ERROR.
 */
uint8_t get_window_ventilator_status(void);

/**
 * @brief Get the fan status.
 *
 * @return uint8_t The possible return values is UNINITIALIZED | OKAY | ERROR.
 */
uint8_t get_fan_status(void);

/**
 * @brief Get the display status.
 *
 * @return uint8_t The possible return values is UNINITIALIZED | OKAY | ERROR.
 */
uint8_t get_display_status(void);

/**
 * @brief Get the keypad status.
 *
 * @return uint8_t The possible return values is UNINITIALIZED | OKAY | ERROR.
 */
uint8_t get_keypad_status(void);

/**
 * @brief Get the buzzer status.
 *
 * @return uint8_t The possible return values is UNINITIALIZED | OKAY | ERROR.
 */
uint8_t get_buzzer_status(void);

/**
 * @brief Get the RGB LED status.
 *
 * @return uint8_t The possible return values is UNINITIALIZED | OKAY | ERROR.
 */
uint8_t get_rgb_status(void);

/**
 * @brief Get the epprom status.
 *
 * @return uint8_t The possible return values is UNINITIALIZED | OKAY | ERROR.
 */
uint8_t get_epprom_status(void);

/**
 * @brief Get the system status.
 *
 * @return uint8_t The possible return values is WARNING | OKAY | ERROR.
 */
uint8_t get_system_status(void);

/**
 * @brief Get the minimum calibration value of temperature.
 *
 * @return uint8_t The return value is between 0 and 50.
 */
uint8_t get_temperature_cal_min_val(void);

/**
 * @brief Get the maximum calibration value of temperature.
 *
 * @return uint8_t The return value is between 0 and 50.
 */
uint8_t get_temperature_cal_max_val(void);

/**
 * @brief Get the minimum calibration value of humidity.
 *
 * @return uint8_t The return value is between 0 and 100.
 */
uint8_t get_humidity_cal_min_val(void);

/**
 * @brief Get the maximum calibration value of humidity.
 *
 * @return uint8_t The return value is between 0 and 100.
 */
uint8_t get_humidity_cal_max_val(void);

/**
 * @brief Get the minimum calibration value of flow rate.
 *
 * @return uint16_t The return value is between 17 and 500.
 */
uint16_t get_flow_meter_cal_min_val(void);

/**
 * @brief Get the maximum calibration value of flow rate.
 *
 * @return uint16_t The return value is between 17 and 500.
 */
uint16_t get_flow_meter_cal_max_val(void);

/**
 * @brief Get the ambient minmum target temperature.
 *
 * @return uint8_t The return value is between 0 and 50.
 */
uint8_t get_temperature_target_min_val(void);

/**
 * @brief Get the ambient maximum target temperature.
 *
 * @return uint8_t The return value is between 0 and 50.
 */
uint8_t get_temperature_target_max_val(void);

/**
 * @brief Get the minmum target humidity.
 *
 * @return uint8_t The return value is between 0 and 100.
 */
uint8_t get_humidity_target_min_val(void);

/**
 * @brief Get the maximum target humidity.
 *
 * @return uint8_t The return value is between 0 and 100.
 */
uint8_t get_humidity_target_max_val(void);

/**
 * @brief Get the minmum target flow rate.
 *
 * @return uint16_t The return value is between 17 and 500.
 */
uint16_t get_flow_meter_target_min_val(void);

/**
 * @brief Get the maximum target flow rate.
 *
 * @return uint16_t The return value is between 17 and 500.
 */
uint16_t get_flow_meter_target_max_val(void);

/**
 * @brief Get the minmum target light intensity.
 *
 * @return uint8_t The return value is between 0 and 100.
 */
uint8_t get_light_intensity_target_min_val(void);

/**
 * @brief Get the minmum target water level.
 *
 * @return uint8_t The return value is between 0 and 100.
 */
uint8_t get_water_level_target_min_val(void);

/**
 * @brief Get the maximum target water level.
 *
 * @return uint8_t The return value is between 0 and 100.
 */
uint8_t get_water_level_target_max_val(void);

/**
 * @brief Get the minimum target soil moisture.
 *
 * @return uint8_t The return value is between 0 and 100.
 */
uint8_t get_soil_moisture_target_min_val(void);

/**
 * @brief Get the maximum target soil moisture.
 *
 * @return uint8_t The return value is between 0 and 100.
 */
uint8_t get_soil_moisture_target_max_val(void);

/**
 * @brief Get the maximum calibration value of water level.
 *
 * @return uint8_t The return value is between 0 and 100.
 */
uint8_t get_water_level_cal_max_val(void);

/**
 * @brief Get the minmum calibration value of water level.
 *
 * @return uint8_t The return value is between 0 and 100.
 */
uint8_t get_water_level_cal_min_val(void);

/**
 * @brief Get the minimum calibration value of soil moisture.
 *
 * @return uint8_t The return value is between 0 and 100.
 */
uint8_t get_soil_moisture_cal_min_val(void);

/**
 * @brief Get the maximum calibration value of soil moisture.
 *
 * @return uint8_t The return value is between 0 and 100.
 */
uint8_t get_soil_moisture_cal_max_val(void);

/**
 * @brief Get the minimum calibration value of light intensity.
 *
 * @return uint8_t The return value is between 0 and 100.
 */
uint8_t get_light_intensity_cal_min_val(void);

/**
 * @brief Get the maximum calibration value of light intensity.
 *
 * @return uint8_t The return value is between 0 and 100.
 */
uint8_t get_light_intensity_cal_max_val(void);

/**
 * @brief Set the esp32 status.
 *
 * @param value The value only can be UNINITIALIZED | OKAY | I2C_ERROR | NTP_ERROR | WIFI_DISCONNECTED | MQTT_DISCONNECTED | MQTT_PUBLISH_ERROR.
 */
void set_esp32_status(uint8_t value);

/**
 * @brief Set the SD card status.
 *
 * @param value The value only can be UNINITIALIZED | OKAY | ERROR.
 */
void set_sdcard_status(uint8_t value);

/**
 * @brief Set the SD card free space in mb.
 *
 * @param value The the SD card free space in mb should be between 0 and 2048.
 */
void set_sdcard_free_space(uint16_t value);

/**
 * @brief Set the SD card status.
 *
 * @param value The value only can be DISCONNECTED | CONNECTED | ERROR.
 */
void set_terminal_status(uint8_t value);

/**
 * @brief Set the RTC status.
 *
 * @param value The value only can be UNINITIALIZED | OKAY.
 */
void set_rtc_status(uint8_t value);

/**
 * @brief Set the current RTC year.
 *
 * @param value The the current RTC year should be between 2020 and 2040.
 */
void set_rtc_year(uint16_t value);

/**
 * @brief Set the current RTC month.
 *
 * @param value The the current RTC month should be between 1 and 12.
 */
void set_rtc_month(uint8_t value);

/**
 * @brief Set the current RTC day.
 *
 * @param value The the current RTC day should be between 1 and 31.
 */
void set_rtc_day(uint8_t value);

/**
 * @brief Set the current RTC hour.
 *
 * @param value The the current RTC hour should be between 0 and 23.
 */
void set_rtc_hour(uint8_t value);

/**
 * @brief Set the current RTC minute.
 *
 * @param value The the current RTC minute should be between 0 and 59.
 */
void set_rtc_minute(uint8_t value);

/**
 * @brief Set the current RTC second.
 *
 * @param value The the current RTC second should be between 0 and 59.
 */
void set_rtc_second(uint8_t value);

/**
 * @brief Set the lamp state.
 *
 * @param value The value only can be OFF | ON.
 */
void set_lamp_state(uint8_t value);

/**
 * @brief Set the heater state.
 *
 * @param value The value only can be OFF | ON.
 */
void set_heater_state(uint8_t value);

/**
 * @brief Set the water pump state.
 *
 * @param value The value only can be OFF | ON.
 */
void set_water_pump_state(uint8_t value);

/**
 * @brief Set the water valve state.
 *
 * @param value The value only can be OFF | ON.
 */
void set_water_valve_state(uint8_t value);

/**
 * @brief Set the window ventilator state.
 *
 * @param value The value only can be CLOSE | OPEN.
 */
void set_window_ventilator_state(uint8_t value);

/**
 * @brief Set the fan state.
 *
 * @param value The value only can be OFF | ON.
 */
void set_fan_state(uint8_t value);

/**
 * @brief Set the minimum calibration value of temperature.
 *
 * @param value The the minimum calibration value of temperature should be between 0 and 50.
 */
void set_temperature_cal_min_val(uint8_t value);

/**
 * @brief Set the maximum calibration value of temperature.
 *
 * @param value The the maximum calibration value of temperature should be between 0 and 50.
 */
void set_temperature_cal_max_val(uint8_t value);

/**
 * @brief Set the minimum calibration value of humidity.
 *
 * @param value The the minimum calibration value of humidity should be between 0 and 100.
 */
void set_humidity_cal_min_val(uint8_t value);

/**
 * @brief Set the maximum calibration value of humidity.
 *
 * @param value The the maximum calibration value of humidity should be between 0 and 100.
 */
void set_humidity_cal_max_val(uint8_t value);

/**
 * @brief Set the minimum calibration value of flow rate.
 *
 * @param value The the minimum calibration value of flow rate should be between 17 and 500.
 */
void set_flow_meter_cal_min_val(uint16_t value);

/**
 * @brief Set the maximum calibration value of flow rate.
 *
 * @param value The the maximum calibration value of flow rate should be between 17 and 500.
 */
void set_flow_meter_cal_max_val(uint16_t value);

/**
 * @brief Set the ambient minmum target temperature.
 *
 * @param value The the ambient minmum target temperature should be between 0 and 50.
 */
void set_temperature_target_min_val(uint8_t value);

/**
 * @brief Set the ambient maximum target temperature.
 *
 * @param value The the ambient maximum target temperature should be between 0 and 50.
 */
void set_temperature_target_max_val(uint8_t value);

/**
 * @brief Set the minmum target humidity.
 *
 * @param value The the minmum target humidity should be between 0 and 100.
 */
void set_humidity_target_min_val(uint8_t value);

/**
 * @brief Set the maximum target humidity.
 *
 * @param value The the maximum target humidity should be between 0 and 100.
 */
void set_humidity_target_max_val(uint8_t value);

/**
 * @brief Set the minmum target flow rate.
 *
 * @param value The the minmum target flow rate should be between 17 and 500.
 */
void set_flow_meter_target_min_val(uint16_t value);

/**
 * @brief Set the maximum target flow rate.
 *
 * @param value The the maximum target flow rate should be between 17 and 500.
 */
void set_flow_meter_target_max_val(uint16_t value);

/**
 * @brief Set the minmum target light intensity.
 *
 * @param value The the minmum target light intensity should be between 0 and 100.
 */
void set_light_intensity_target_min_val(uint8_t value);

/**
 * @brief Set the minmum target water level.
 *
 * @param value The the minmum target water level should be between 0 and 100.
 */
void set_water_level_target_min_val(uint8_t value);

/**
 * @brief Set the maximum target water level.
 *
 * @param value The the maximum target water level should be between 0 and 100.
 */
void set_water_level_target_max_val(uint8_t value);

/**
 * @brief Set the minimum target soil moisture.
 *
 * @param value The the minimum target soil moisture should be between 0 and 100.
 */
void set_soil_moisture_target_min_val(uint8_t value);

/**
 * @brief Set the maximum target soil moisture.
 *
 * @param value The the maximum target soil moisture should be between 0 and 100.
 */
void set_soil_moisture_target_max_val(uint8_t value);

/**
 * @brief Set the maximum calibration value of water level.
 *
 * @param value The the maximum calibration value of water level should be between 0 and 100.
 */
void set_water_level_cal_max_val(uint8_t value);

/**
 * @brief Set the minmum calibration value of water level.
 *
 * @param value The the minmum calibration value of water level should be between 0 and 100.
 */
void set_water_level_cal_min_val(uint8_t value);

/**
 * @brief Set the minimum calibration value of soil moisture.
 *
 * @param value The the minimum calibration value of soil moisture should be between 0 and 100.
 */
void set_soil_moisture_cal_min_val(uint8_t value);

/**
 * @brief Set the maximum calibration value of soil moisture.
 *
 * @param value The the maximum calibration value of soil moisture should be between 0 and 100.
 */
void set_soil_moisture_cal_max_val(uint8_t value);

/**
 * @brief Set the minimum calibration value of light intensity.
 *
 * @param value The the minimum calibration value of light intensity should be between 0 and 100.
 */
void set_light_intensity_cal_min_val(uint8_t value);

/**
 * @brief Set the maximum calibration value of light intensity.
 *
 * @param value The the maximum calibration value of light intensity should be between 0 and 100.
 */
void set_light_intensity_cal_max_val(uint8_t value);

/**
 * @brief Check if the the minimum calibration value of temperature is valid or not.
 *
 * @return true if the calibration is valid, else return false.
  */
bool validate_temperature_cal_min_val(void);

/**
 * @brief Check if the the maximum calibration value of temperature is valid or not.
 *
 * @return true if the calibration is valid, else return false.
  */
bool validate_temperature_cal_max_val(void);

/**
 * @brief Check if the the minimum calibration value of humidity is valid or not.
 *
 * @return true if the calibration is valid, else return false.
  */
bool validate_humidity_cal_min_val(void);

/**
 * @brief Check if the the maximum calibration value of humidity is valid or not.
 *
 * @return true if the calibration is valid, else return false.
  */
bool validate_humidity_cal_max_val(void);

/**
 * @brief Check if the the minimum calibration value of flow rate is valid or not.
 *
 * @return true if the calibration is valid, else return false.
  */
bool validate_flow_meter_cal_min_val(void);

/**
 * @brief Check if the the maximum calibration value of flow rate is valid or not.
 *
 * @return true if the calibration is valid, else return false.
  */
bool validate_flow_meter_cal_max_val(void);

/**
 * @brief Check if the the ambient minmum target temperature is valid or not.
 *
 * @return true if the calibration is valid, else return false.
  */
bool validate_temperature_target_min_val(void);

/**
 * @brief Check if the the ambient maximum target temperature is valid or not.
 *
 * @return true if the calibration is valid, else return false.
  */
bool validate_temperature_target_max_val(void);

/**
 * @brief Check if the the minmum target humidity is valid or not.
 *
 * @return true if the calibration is valid, else return false.
  */
bool validate_humidity_target_min_val(void);

/**
 * @brief Check if the the maximum target humidity is valid or not.
 *
 * @return true if the calibration is valid, else return false.
  */
bool validate_humidity_target_max_val(void);

/**
 * @brief Check if the the minmum target flow rate is valid or not.
 *
 * @return true if the calibration is valid, else return false.
  */
bool validate_flow_meter_target_min_val(void);

/**
 * @brief Check if the the maximum target flow rate is valid or not.
 *
 * @return true if the calibration is valid, else return false.
  */
bool validate_flow_meter_target_max_val(void);

/**
 * @brief Check if the the minmum target light intensity is valid or not.
 *
 * @return true if the calibration is valid, else return false.
  */
bool validate_light_intensity_target_min_val(void);

/**
 * @brief Check if the the minmum target water level is valid or not.
 *
 * @return true if the calibration is valid, else return false.
  */
bool validate_water_level_target_min_val(void);

/**
 * @brief Check if the the maximum target water level is valid or not.
 *
 * @return true if the calibration is valid, else return false.
  */
bool validate_water_level_target_max_val(void);

/**
 * @brief Check if the the minimum target soil moisture is valid or not.
 *
 * @return true if the calibration is valid, else return false.
  */
bool validate_soil_moisture_target_min_val(void);

/**
 * @brief Check if the the maximum target soil moisture is valid or not.
 *
 * @return true if the calibration is valid, else return false.
  */
bool validate_soil_moisture_target_max_val(void);

/**
 * @brief Check if the the maximum calibration value of water level is valid or not.
 *
 * @return true if the calibration is valid, else return false.
  */
bool validate_water_level_cal_max_val(void);

/**
 * @brief Check if the the minmum calibration value of water level is valid or not.
 *
 * @return true if the calibration is valid, else return false.
  */
bool validate_water_level_cal_min_val(void);

/**
 * @brief Check if the the minimum calibration value of soil moisture is valid or not.
 *
 * @return true if the calibration is valid, else return false.
  */
bool validate_soil_moisture_cal_min_val(void);

/**
 * @brief Check if the the maximum calibration value of soil moisture is valid or not.
 *
 * @return true if the calibration is valid, else return false.
  */
bool validate_soil_moisture_cal_max_val(void);

/**
 * @brief Check if the the minimum calibration value of light intensity is valid or not.
 *
 * @return true if the calibration is valid, else return false.
  */
bool validate_light_intensity_cal_min_val(void);

/**
 * @brief Check if the the maximum calibration value of light intensity is valid or not.
 *
 * @return true if the calibration is valid, else return false.
  */
bool validate_light_intensity_cal_max_val(void);

/**
 * @brief Overwrite the the lamp state value.
 *
 * @param bool value
 */
void overwrite_lamp_state(bool value);

/**
 * @brief Overwrite the the heater state value.
 *
 * @param bool value
 */
void overwrite_heater_state(bool value);

/**
 * @brief Overwrite the the water pump state value.
 *
 * @param bool value
 */
void overwrite_water_pump_state(bool value);

/**
 * @brief Overwrite the the water valve state value.
 *
 * @param bool value
 */
void overwrite_water_valve_state(bool value);

/**
 * @brief Overwrite the the window ventilator state value.
 *
 * @param bool value
 */
void overwrite_window_ventilator_state(bool value);

/**
 * @brief Overwrite the the fan state value.
 *
 * @param bool value
 */
void overwrite_fan_state(bool value);

/**
 * @brief Is the ambient temperature overwritten.
 *
 * @return true if overwritten else false.
 */
bool is_temperature_overwritten(void);

/**
 * @brief Is the ambient humidity percentage overwritten.
 *
 * @return true if overwritten else false.
 */
bool is_humidity_overwritten(void);

/**
 * @brief Is the flow rate in milliliter per second overwritten.
 *
 * @return true if overwritten else false.
 */
bool is_flow_rate_overwritten(void);

/**
 * @brief Is the light intensity percentage overwritten.
 *
 * @return true if overwritten else false.
 */
bool is_light_intensity_overwritten(void);

/**
 * @brief Is the water level percentage overwritten.
 *
 * @return true if overwritten else false.
 */
bool is_water_level_overwritten(void);

/**
 * @brief Is the soil moisture percentage overwritten.
 *
 * @return true if overwritten else false.
 */
bool is_soil_moisture_overwritten(void);

/**
 * @brief Is the dht sensor status overwritten.
 *
 * @return true if overwritten else false.
 */
bool is_dht_sensor_status_overwritten(void);

/**
 * @brief Is the flow meter sensor status overwritten.
 *
 * @return true if overwritten else false.
 */
bool is_flow_meter_sensor_status_overwritten(void);

/**
 * @brief Is the light intensity sensor status overwritten.
 *
 * @return true if overwritten else false.
 */
bool is_light_intesity_sensor_status_overwritten(void);

/**
 * @brief Is the water level sensor status overwritten.
 *
 * @return true if overwritten else false.
 */
bool is_water_level_sensor_status_overwritten(void);

/**
 * @brief Is the soil moisture sensor status overwritten.
 *
 * @return true if overwritten else false.
 */
bool is_soil_moisture_sensor_status_overwritten(void);

/**
 * @brief Is the esp32 status overwritten.
 *
 * @return true if overwritten else false.
 */
bool is_esp32_status_overwritten(void);

/**
 * @brief Is the SD card status overwritten.
 *
 * @return true if overwritten else false.
 */
bool is_sdcard_status_overwritten(void);

/**
 * @brief Is the SD card free space in mb overwritten.
 *
 * @return true if overwritten else false.
 */
bool is_sdcard_free_space_overwritten(void);

/**
 * @brief Is the SD card status overwritten.
 *
 * @return true if overwritten else false.
 */
bool is_terminal_status_overwritten(void);

/**
 * @brief Is the RTC status overwritten.
 *
 * @return true if overwritten else false.
 */
bool is_rtc_status_overwritten(void);

/**
 * @brief Is the current RTC year overwritten.
 *
 * @return true if overwritten else false.
 */
bool is_rtc_year_overwritten(void);

/**
 * @brief Is the current RTC month overwritten.
 *
 * @return true if overwritten else false.
 */
bool is_rtc_month_overwritten(void);

/**
 * @brief Is the current RTC day overwritten.
 *
 * @return true if overwritten else false.
 */
bool is_rtc_day_overwritten(void);

/**
 * @brief Is the current RTC hour overwritten.
 *
 * @return true if overwritten else false.
 */
bool is_rtc_hour_overwritten(void);

/**
 * @brief Is the current RTC minute overwritten.
 *
 * @return true if overwritten else false.
 */
bool is_rtc_minute_overwritten(void);

/**
 * @brief Is the current RTC second overwritten.
 *
 * @return true if overwritten else false.
 */
bool is_rtc_second_overwritten(void);

/**
 * @brief Is the lamp state overwritten.
 *
 * @return true if overwritten else false.
 */
bool is_lamp_state_overwritten(void);

/**
 * @brief Is the heater state overwritten.
 *
 * @return true if overwritten else false.
 */
bool is_heater_state_overwritten(void);

/**
 * @brief Is the water pump state overwritten.
 *
 * @return true if overwritten else false.
 */
bool is_water_pump_state_overwritten(void);

/**
 * @brief Is the water valve state overwritten.
 *
 * @return true if overwritten else false.
 */
bool is_water_valve_state_overwritten(void);

/**
 * @brief Is the window ventilator state overwritten.
 *
 * @return true if overwritten else false.
 */
bool is_window_ventilator_state_overwritten(void);

/**
 * @brief Is the fan state overwritten.
 *
 * @return true if overwritten else false.
 */
bool is_fan_state_overwritten(void);

/**
 * @brief Is the lamp status overwritten.
 *
 * @return true if overwritten else false.
 */
bool is_lamp_status_overwritten(void);

/**
 * @brief Is the heater status overwritten.
 *
 * @return true if overwritten else false.
 */
bool is_heater_status_overwritten(void);

/**
 * @brief Is the water_pump status overwritten.
 *
 * @return true if overwritten else false.
 */
bool is_water_pump_status_overwritten(void);

/**
 * @brief Is the water_valve status overwritten.
 *
 * @return true if overwritten else false.
 */
bool is_water_valve_status_overwritten(void);

/**
 * @brief Is the window ventilator status overwritten.
 *
 * @return true if overwritten else false.
 */
bool is_window_ventilator_status_overwritten(void);

/**
 * @brief Is the fan status overwritten.
 *
 * @return true if overwritten else false.
 */
bool is_fan_status_overwritten(void);

/**
 * @brief Is the display status overwritten.
 *
 * @return true if overwritten else false.
 */
bool is_display_status_overwritten(void);

/**
 * @brief Is the keypad status overwritten.
 *
 * @return true if overwritten else false.
 */
bool is_keypad_status_overwritten(void);

/**
 * @brief Is the buzzer status overwritten.
 *
 * @return true if overwritten else false.
 */
bool is_buzzer_status_overwritten(void);

/**
 * @brief Is the RGB LED status overwritten.
 *
 * @return true if overwritten else false.
 */
bool is_rgb_status_overwritten(void);

/**
 * @brief Is the epprom status overwritten.
 *
 * @return true if overwritten else false.
 */
bool is_epprom_status_overwritten(void);

/**
 * @brief Is the system status overwritten.
 *
 * @return true if overwritten else false.
 */
bool is_system_status_overwritten(void);

/**
 * @brief Is the minimum calibration value of temperature overwritten.
 *
 * @return true if overwritten else false.
 */
bool is_temperature_cal_min_val_overwritten(void);

/**
 * @brief Is the maximum calibration value of temperature overwritten.
 *
 * @return true if overwritten else false.
 */
bool is_temperature_cal_max_val_overwritten(void);

/**
 * @brief Is the minimum calibration value of humidity overwritten.
 *
 * @return true if overwritten else false.
 */
bool is_humidity_cal_min_val_overwritten(void);

/**
 * @brief Is the maximum calibration value of humidity overwritten.
 *
 * @return true if overwritten else false.
 */
bool is_humidity_cal_max_val_overwritten(void);

/**
 * @brief Is the minimum calibration value of flow rate overwritten.
 *
 * @return true if overwritten else false.
 */
bool is_flow_meter_cal_min_val_overwritten(void);

/**
 * @brief Is the maximum calibration value of flow rate overwritten.
 *
 * @return true if overwritten else false.
 */
bool is_flow_meter_cal_max_val_overwritten(void);

/**
 * @brief Is the ambient minmum target temperature overwritten.
 *
 * @return true if overwritten else false.
 */
bool is_temperature_target_min_val_overwritten(void);

/**
 * @brief Is the ambient maximum target temperature overwritten.
 *
 * @return true if overwritten else false.
 */
bool is_temperature_target_max_val_overwritten(void);

/**
 * @brief Is the minmum target humidity overwritten.
 *
 * @return true if overwritten else false.
 */
bool is_humidity_target_min_val_overwritten(void);

/**
 * @brief Is the maximum target humidity overwritten.
 *
 * @return true if overwritten else false.
 */
bool is_humidity_target_max_val_overwritten(void);

/**
 * @brief Is the minmum target flow rate overwritten.
 *
 * @return true if overwritten else false.
 */
bool is_flow_meter_target_min_val_overwritten(void);

/**
 * @brief Is the maximum target flow rate overwritten.
 *
 * @return true if overwritten else false.
 */
bool is_flow_meter_target_max_val_overwritten(void);

/**
 * @brief Is the minmum target light intensity overwritten.
 *
 * @return true if overwritten else false.
 */
bool is_light_intensity_target_min_val_overwritten(void);

/**
 * @brief Is the minmum target water level overwritten.
 *
 * @return true if overwritten else false.
 */
bool is_water_level_target_min_val_overwritten(void);

/**
 * @brief Is the maximum target water level overwritten.
 *
 * @return true if overwritten else false.
 */
bool is_water_level_target_max_val_overwritten(void);

/**
 * @brief Is the minimum target soil moisture overwritten.
 *
 * @return true if overwritten else false.
 */
bool is_soil_moisture_target_min_val_overwritten(void);

/**
 * @brief Is the maximum target soil moisture overwritten.
 *
 * @return true if overwritten else false.
 */
bool is_soil_moisture_target_max_val_overwritten(void);

/**
 * @brief Is the maximum calibration value of water level overwritten.
 *
 * @return true if overwritten else false.
 */
bool is_water_level_cal_max_val_overwritten(void);

/**
 * @brief Is the minmum calibration value of water level overwritten.
 *
 * @return true if overwritten else false.
 */
bool is_water_level_cal_min_val_overwritten(void);

/**
 * @brief Is the minimum calibration value of soil moisture overwritten.
 *
 * @return true if overwritten else false.
 */
bool is_soil_moisture_cal_min_val_overwritten(void);

/**
 * @brief Is the maximum calibration value of soil moisture overwritten.
 *
 * @return true if overwritten else false.
 */
bool is_soil_moisture_cal_max_val_overwritten(void);

/**
 * @brief Is the minimum calibration value of light intensity overwritten.
 *
 * @return true if overwritten else false.
 */
bool is_light_intensity_cal_min_val_overwritten(void);

/**
 * @brief Is the maximum calibration value of light intensity overwritten.
 *
 * @return true if overwritten else false.
 */
bool is_light_intensity_cal_max_val_overwritten(void);



#endif /* CANBUS_H */